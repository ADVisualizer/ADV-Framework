plugins {
    id 'com.github.spotbugs' version '1.6.0'
    id "com.jfrog.bintray" version "1.8.0"
}

group = 'ch.hsr.adv'
version = '0.3'

/****************************************
 * instructions for all projects
 ****************************************/
allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    repositories {
        mavenLocal()
        maven {
            url "https://dl.bintray.com/adv/adv"
        }
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = 1.9
    targetCompatibility = 1.9
}

/****************************************
 * instructions for each sub project
 ****************************************/
subprojects {

    checkstyle {
        ignoreFailures = false
        showViolations = true
        configFile = file("${project.rootDir}/checkstyle.xml")
        checkstyleTest.enabled = false
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    spotbugs {
        excludeFilter = file("$project.rootDir/excludeFilter.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    dependencies {
        // put common dependencies in core -> all submodules need the core anyway

        // put common test dependencies here
        testCompile 'junit:junit:4+'
        testCompile 'org.jukito:jukito:1+'
        testCompile 'org.hamcrest:hamcrest-library:1+'
        // ui testing frameworks
        testCompile "org.testfx:openjfx-monocle:jdk-9+181"

        testCompile('org.testfx:testfx-core:4.0.12-alpha') {
            exclude group: 'org.testfx',
                    module: 'testfx-internal-java8'
        }
        testRuntime 'org.testfx:testfx-internal-java9:4.0.12-alpha'

    }
}

/****************************************
 * Single library jar containing all sub projects and 3rd party dependencies
 ****************************************/
configurations {
    childJars
}

dependencies {
    subprojects.each {
        childJars project(it.path)
    }
}

jar {
    dependsOn configurations.childJars
    exclude('**/logback.xml')
    from { configurations.childJars.collect { zipTree(it) } }
    manifest {
        attributes 'Main-Class': 'ch.hsr.adv.ui.bootstrapper.Bootstrapper'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

/****************************************
 * Aggregate code coverage for Codecov coverage upload
 ****************************************/
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

/****************************************
 * Bintray deployment (needed for Maven Central)
 ****************************************/
bintray {
    user = System.getenv('BINTRAY_USER') // bintray username (not organisation)
    key = System.getenv('BINTRAY_KEY')   // api-key
    override = true
    publish = true
    filesSpec {
        from 'build/libs'
        into "/ch/hsr/adv/adv-ui/${project.version}/"
    }

    publications = ['MavenCustom']
    pkg {
        repo = 'adv'
        name = 'adv-ui'
        userOrg = 'adv'
        licenses = ['AGPL-V3']
        websiteUrl = 'https://github.com/ADVisualizer/ADV-UI'
        issueTrackerUrl = 'https://github.com/ADVisualizer/ADV-UI/issues'
        vcsUrl = 'https://github.com/ADVisualizer/ADV-UI.git'
        githubRepo = 'ADVisualizer/ADV-UI'
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name 'GNU AFFERO GENERAL PUBLIC LICENSE, Version 3.0'
            url 'https://www.gnu.org/licenses/agpl.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'mwieland'
            name 'Michael Wieland'
            email 'mwieland@hsr.ch'
        }
        developer {
            id 'mtrentini'
            name 'Muriele Trentini'
            email 'mtrentin@hsr.ch'
        }
    }

    scm {
        url 'https://github.com/ADVisualizer/ADV-UI'
        connection 'https://git@github.com/ADVisualizer/ADV-UI.git'
        developerConnection 'scm:git:https://github.com/ADVisualizer/ADV-UI.git'
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        MavenCustom(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId project.group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'ADV UI Project')
                root.appendNode('name', 'ADV UI')
                root.appendNode('url', 'https://github.com/ADVisualizer/ADV-UI')
                root.children().last() + pomConfig
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenCustomPublication {
        destination = file("$buildDir/libs/${project.name}-${project.version}.pom")
    }
}








